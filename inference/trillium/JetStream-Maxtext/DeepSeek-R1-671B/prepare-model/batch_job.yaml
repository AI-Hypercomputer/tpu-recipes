# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

taskGroups:
  - taskSpec:
      runnables:
        # Download the model from Hugging Face
        - container:
            imageUri: ${ARTIFACT_REGISTRY}/${JETSTREAM_MAXTEXT_IMAGE}:${JETSTREAM_MAXTEXT_VERSION}
            entrypoint: "/bin/sh"
            commands:
              - "-c"
              - mkdir -p /mnt/disks/persist/models/ && echo "Downloading model ${HF_MODEL_NAME}" && huggingface-cli download ${HF_MODEL_NAME} --local-dir /mnt/disks/persist/models/fp8
        # Run the conversion script
        - container:
            imageUri: ${ARTIFACT_REGISTRY}/${JETSTREAM_MAXTEXT_IMAGE}:${JETSTREAM_MAXTEXT_VERSION}
            entrypoint: "/bin/sh"
            commands:
              - "-c"
              - echo "Converting checkpoint from fp8 to bf16" && cd /maxtext && python3 -m MaxText.deepseek_fp8_to_bf16 --input-fp8-hf-path /mnt/disks/persist/models/fp8 --output-bf16-hf-path /mnt/disks/persist/models/bf16 --cache-file-num 16
        # Run the unscanned checkpoint conversion from bf16 to maxtext/unscanned format
        - container:
            imageUri: ${ARTIFACT_REGISTRY}/${JETSTREAM_MAXTEXT_IMAGE}:${JETSTREAM_MAXTEXT_VERSION}
            entrypoint: "/bin/sh"
            commands:
              - "-c"
              - echo "Converting checkpoint from bf16 to maxtext/unscanned format" && cd /maxtext && JAX_PLATFORMS='' python3 -m MaxText.convert_deepseek_unscanned_ckpt --base_model_path /mnt/disks/persist/models/bf16 --maxtext_model_path ${GCS_CKPT_PATH_UNSCANNED} --model_size $MODEL_NAME --use-zarr3 false --use-ocdbt false
        # Run the layerwise quantization script
        - container:
            imageUri: ${ARTIFACT_REGISTRY}/${JETSTREAM_MAXTEXT_IMAGE}:${JETSTREAM_MAXTEXT_VERSION}
            entrypoint: "/bin/sh"
            commands:
              - "-c"
              - echo "Quantizing checkpoint to INT8 format" && cd /maxtext && JAX_PLATFORMS='' python3 -m MaxText.layerwise_quantization MaxText/configs/base.yml tokenizer_path=${HF_MODEL_NAME} load_parameters_path=${GCS_CKPT_PATH_UNSCANNED}/0/items model_name=${MODEL_NAME} ici_fsdp_parallelism=1 ici_autoregressive_parallelism=1 ici_tensor_parallelism=-1 scan_layers=false weight_dtype=bfloat16 per_device_batch_size=1 attention=dot_product quantization=int8 async_checkpointing=false enable_single_controller=true tokenizer_type=huggingface megablox=false sparse_matmul=false save_quantized_params_path=${GCS_CKPT_PATH_QUANTIZED} && echo "Completed quantizing checkpoint. Quantized checkpoint saved at ${GCS_CKPT_PATH_QUANTIZED}"
      volumes:
        - deviceName: persist
          mountPath: /mnt/disks/persist
          mountOptions: rw,async
      computeResource:
        cpuMilli: 160000
        memoryMib: 3936256
# Define the allocation policy for provisioning VMs
allocationPolicy:
  location:
    allowedLocations: ["regions/${CLUSTER_CKPT_NODE_REGION}"]
  instances:
    - policy:
        machineType: ${CLUSTER_CKPT_NODE_MACHINE_TYPE}
        bootDisk:
          type: pd-ssd
          sizeGb: 500
        disks:
          newDisk:
            sizeGb: 3000
            type: pd-ssd
          deviceName: persist
logsPolicy:
  destination: CLOUD_LOGGING